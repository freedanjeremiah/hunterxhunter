Metadata-Version: 2.4
Name: walrus-git-cli
Version: 1.0.0
Summary: Git-like CLI for Walrus decentralized storage with push/pull functionality
Home-page: https://github.com/walrus-storage/walrus-git-cli
Author: Walrus Developer
Author-email: Walrus Developer <developer@walrus.storage>
Maintainer-email: Walrus Developer <developer@walrus.storage>
License: MIT
Project-URL: Homepage, https://github.com/walrus-storage/walrus-git-cli
Project-URL: Documentation, https://docs.walrus.storage/
Project-URL: Repository, https://github.com/walrus-storage/walrus-git-cli.git
Project-URL: Bug Tracker, https://github.com/walrus-storage/walrus-git-cli/issues
Project-URL: Changelog, https://github.com/walrus-storage/walrus-git-cli/blob/main/CHANGELOG.md
Keywords: walrus,storage,git,cli,decentralized,blockchain
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: System :: Archiving
Classifier: Topic :: Software Development :: Version Control
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Environment :: Console
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyYAML>=6.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: black>=21.0.0; extra == "dev"
Requires-Dist: flake8>=3.8.0; extra == "dev"
Requires-Dist: mypy>=0.900; extra == "dev"
Provides-Extra: publisher
Requires-Dist: PyYAML>=6.0; extra == "publisher"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# 🐋 Walrus Git CLI

[![PyPI version](https://badge.fury.io/py/walrus-git-cli.svg)](https://badge.fury.io/py/walrus-git-cli)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A professional **Git-like command-line interface** for [Walrus](https://walrus.storage/) decentralized storage. Push and pull directories to/from Walrus storage with familiar Git-style commands.

## 🚀 Quick Install

### One-Command Install
```bash
# Download and install
curl -sSL https://raw.githubusercontent.com/walrus-storage/walrus-git-cli/main/install.sh | bash

# Or clone and install
git clone https://github.com/walrus-storage/walrus-git-cli.git
cd walrus-git-cli
./install.sh
```

### Alternative Install Methods
```bash
# Using pip (modern Python packaging)
pip install -e .

# Or using setup.py
python setup.py develop
```

## 📋 Prerequisites

- **Python 3.8+** 
- **[Walrus CLI](https://docs.walrus.storage/)** installed and configured
- **pip** for package management

## 🎯 Features

✅ **Git-like Commands**: Familiar `push` and `pull` interface  
✅ **Smart Change Detection**: Only uploads when content changes  
✅ **Metadata Management**: Local tracking of blob IDs and versions  
✅ **Compression**: Efficient ZIP compression for storage  
✅ **Cross-Platform**: Works on Linux, macOS, and Windows  
✅ **Professional CLI**: Rich help, error handling, and progress feedback  
✅ **Multiple Install Options**: Package manager or standalone  

## 🔧 Usage

## 🔧 Usage

### Basic Commands

After installation, use these commands anywhere:

```bash
# Push current directory to Walrus
walrus push .

# Push specific directory
walrus push /path/to/my/project

# Pull from Walrus to current directory
walrus pull .

# Pull to specific directory
walrus pull /path/to/restore/location

# List all tracked repositories
walrus list

# Show help
walrus --help
```

### Alternative Commands
```bash
# Direct command shortcuts
walrus-push .       # Direct push command
walrus-pull .       # Direct pull command  
walrus-list         # Direct list command
```

### Advanced Usage
```bash
# Push with custom epochs
walrus push . --epochs 10

# Verbose listing
walrus list --verbose

# Get version info
walrus --version
```

## 📖 Example Workflow

```bash
# 1. Create and navigate to your project
mkdir my-awesome-project
cd my-awesome-project
echo "Hello Walrus!" > README.txt

# 2. Push to Walrus storage
walrus push .
# Output: Successfully pushed to Walrus. Blob ID: CppKdaQ0aPWUHsIzrwnCHdD9Puo1QfAuOSxROAaO8lU

# 3. Make some changes
echo "Updated content" >> README.txt
mkdir src
echo "print('Hello World')" > src/main.py

# 4. Push changes (only uploads if content changed)
walrus push .

# 5. Go to another machine/directory
cd /different/location

# 6. Pull your project
walrus pull my-awesome-project
cd my-awesome-project
ls -la  # Your files are restored!
```

## 🏗️ Architecture

### How It Works
- **Compression**: Directories are compressed into ZIP archives
- **Storage**: Archives uploaded to Walrus using `walrus store` command
- **Metadata**: Local `.walrus/metadata.json` tracks blob IDs and versions
- **Change Detection**: SHA-256 hashing prevents unnecessary uploads
- **Restoration**: `walrus read` downloads and extracts archives

### Data Flow
```
Local Directory → ZIP Archive → Walrus Store → Blob ID → Local Metadata
Local Metadata → Blob ID → Walrus Read → ZIP Archive → Restored Directory
```

### File Structure
```
your-project/
├── .walrus/
│   └── metadata.json    # Repository tracking
├── your-files...
└── your-directories...
```

## ⚙️ Configuration

The application stores metadata in `.walrus/metadata.json`:

```json
{
  "/absolute/path/to/directory": {
    "blob_id": "CppKdaQ0aPWUHsIzrwnCHdD9Puo1QfAuOSxROAaO8lU",
    "hash": "abaf021e13a6a39eb14d8d94436b5341a3d7feadb10ec0e1a0bde644506b04bb",
    "timestamp": "2025-09-27T02:01:40.069079",
    "directory_name": "walrus"
  }
}
```

## 🔧 Development

### Local Development Setup
```bash
# Clone repository
git clone https://github.com/walrus-storage/walrus-git-cli.git
cd walrus-git-cli

# Install in development mode
pip install -e .

# Install development dependencies
pip install -e .[dev]

# Run tests
pytest tests/

# Format code
black walrus_cli.py

# Type checking
mypy walrus_cli.py
```

### Building Distribution
```bash
# Build wheel and source distribution
python -m build

# Upload to PyPI (for maintainers)
python -m twine upload dist/*
```

## 🐛 Troubleshooting

### Common Issues

**❌ "walrus command not found"**
```bash
# Install Walrus CLI first
curl -sSL https://install.walrus.storage/ | bash
# Or visit: https://docs.walrus.storage/
```

**❌ "No repository found for directory"**
```bash
# Directory hasn't been pushed yet
walrus list          # See tracked repositories
walrus push .        # Push current directory first
```

**❌ "Failed to store blob in Walrus"**
- Check Walrus CLI configuration: `walrus info`
- Verify network connection to Walrus network
- Ensure sufficient storage quota/tokens

**❌ "Command 'walrus' not found after install"**
```bash
# Restart terminal or reload PATH
source ~/.bashrc

# Or add to PATH manually
export PATH="$PATH:$HOME/.local/bin"

# Or reinstall with --user flag
pip install --user -e .
```

## 📊 Performance & Limits

- **Directory Size**: Limited by available memory for ZIP compression
- **File Types**: All file types supported (binary-safe)
- **Network**: Efficient - only uploads on content changes
- **Storage**: Uses Walrus network's built-in deduplication
- **Concurrency**: Single-threaded operations (safe for concurrent use)

## 🤝 Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

### Quick Contribution Setup
```bash
# Fork and clone
git clone https://github.com/yourusername/walrus-git-cli.git
cd walrus-git-cli

# Create feature branch
git checkout -b feature/amazing-feature

# Make changes and test
pip install -e .[dev]
pytest

# Submit pull request
```

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🔗 Links

- **📖 Documentation**: [https://docs.walrus.storage/](https://docs.walrus.storage/)
- **🐛 Issues**: [GitHub Issues](https://github.com/walrus-storage/walrus-git-cli/issues)
- **💬 Discussions**: [GitHub Discussions](https://github.com/walrus-storage/walrus-git-cli/discussions)
- **🏠 Walrus Homepage**: [https://walrus.storage/](https://walrus.storage/)

## 🙏 Acknowledgments

- Built for the [Walrus](https://walrus.storage/) decentralized storage network
- Inspired by Git's simple and powerful interface
- Thanks to all contributors and the Walrus community

---

**⭐ If this tool is helpful, please star the repository!**
